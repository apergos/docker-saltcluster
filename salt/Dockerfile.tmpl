# base dockerfile for creating salt master and clients in a cluster,
# this base image uses {os_text} {os_version_text}; base images may be mixed and matched
# one salt minion per container, and one salt master to rule them all

FROM {os_text}:{os_version_number}
ENV DEBIAN_FRONTEND noninteractive

RUN echo "deb http://{os_repo}/{os_text} {os_version_text} main {os_repo_extras}" > /etc/apt/sources.list
{backports}
RUN apt-get update && apt-get install -y apt-utils

# required for salt and/or pupaas
{preinstall}

# dirs for packages
RUN mkdir -p /root/depends/ /root/salt/

{deps}

# stuff in all the salt packages, we don't know
# which ones the user will want
{salt_debs}

# salt source, so we can install from various branches
RUN apt-get install -y {git} && mkdir -p /src && git clone https://github.com/saltstack/salt.git /src/salt

# set up salt init scripts (can't rely on upstart)
RUN cat /src/salt/debian/salt-master.init | sed -e 's|usr/bin/salt-master|usr/local/bin/salt-master|g;' > /root/salt-master
RUN cat /src/salt/debian/salt-minion.init | sed -e 's|usr/bin/salt-minion|usr/local/bin/salt-minion|g;' > /root/salt-minion

RUN mkdir -p /srv/runners /srv/salt /srv/pillars

# need these for master and minion
EXPOSE 4506 4505

# set up puppet for use via puppet apply
#
# we need no certs or keys
RUN apt-get install -y puppet-common && mkdir -p /etc/puppet/files
ADD puppet-salt/fileserver.conf /etc/puppet/fileserver.conf
ADD puppet-salt/files/salt-master-config /etc/puppet/files/salt-master-config
ADD puppet-salt/templates/salt-minion-config.templ /etc/puppet/templates/salt-minion-config.templ
ADD puppet-salt/manifests/salt.pp /etc/puppet/manifests/salt.pp
# fixme this is horrible
ADD puppet-salt/salt_key_fingerprint.rb {ruby}/facter/salt_key_fingerprint.rb
RUN apt-get install -y puppet
RUN mkdir -p /var/lib/puppet/facts && chown puppet:puppet /var/lib/puppet/facts
# need to add the templatedir which is not in the default puppet config
# installed in /etc/puppet/puppet.conf
RUN sed -e 's|\[main\]|\[main\]\ntemplatedir=/etc/puppet/templates\n|;' /etc/puppet/puppet.conf > /etc/puppet/puppet.conf.new
RUN mv /etc/puppet/puppet.conf.new /etc/puppet/puppet.conf

# set up puppet-as-a-service for post-startup config
# of container
RUN mkdir -p /src && git clone https://github.com/apergos/pupaas.git /src/pupaas
RUN cp /src/pupaas/pupaas.py /usr/sbin/
RUN mkdir -p /etc/pupaas && /bin/echo -e 'port=8010\nmanifests=/etc/puppet/' > /etc/pupaas/pupaas.conf

EXPOSE 8010

{ssldeps}

# ssh access into container
RUN apt-get install -y openssh-server && mkdir -p /var/run/sshd  && echo 'root:testing' |chpasswd

EXPOSE 22

#make sshd response quicker; allow login as root with password
RUN cat /etc/ssh/sshd_config | sed -e 's/#GSSAPIAuthentication no/GSSAPIAuthentication no/; s/PermitRootLogin without-password/PermitRootLogin yes/' > /etc/ssh/sshd_config.new
RUN mv /etc/ssh/sshd_config.new /etc/ssh/sshd_config

# workaround for auditd or unwriteable /proc or broken pam loginuid module
RUN cat /etc/pam.d/sshd | sed -e 's/session    required     pam_loginuid.so/#session    required     pam_loginuid.so/' > /etc/pam.d/sshd.new
RUN mv /etc/pam.d/sshd.new /etc/pam.d/sshd

# try without much hope
RUN cat /etc/pam.d/login | grep -v pam_selinux.so > /etc/pam.d/login.new
RUN mv /etc/pam.d/login.new /etc/pam.d/login

CMD python /usr/sbin/pupaas.py && /usr/sbin/sshd -D
